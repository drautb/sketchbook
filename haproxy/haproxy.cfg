global
  quiet
  daemon
  log-send-hostname
  log 127.0.0.1:10514 local2 debug info
  log 127.0.0.1:10514 local3 notice emerg
  user  drautb
  group staff
  maxconn 65000
  stats socket /run/haproxy/stats.sock mode 600 level operator
  stats timeout 2m

defaults
  mode  http
  option  redispatch
  option  allbackups
  option  dontlognull
  option  log-health-checks
  retries 3
  maxconn 65000
  timeout client  300000
  timeout server  300000
  timeout connect 5000
  # ELBs have a 1 to 3600 s idle timeout, making haproxy Tt #s useless
  # https://aws.amazon.com/blogs/aws/elb-idle-timeout-control/
  # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#8.4
  log-format  {\"date\":\"%t\",\"lbtype\":\"dtm\",\"lbname\":\"%H\",\"cip\":\"%ci\",\"pid\":\"%pid\",\"name_f\":\"%f\",\"name_b\":\"%b\",\"name_s\":\"%s\",\"Tw\":\"%Tw\",\"Tc\":\"%Tc\",\"Tr\":\"%Tr\",\"scode\":\"%ST\",\"bytes_c\":\"%U\",\"bytes_s\":\"%B\",\"termstat\":\"%ts\",\"con_act\":\"%ac\",\"con_frnt\":\"%fc\",\"con_back\":\"%bc\",\"con_srv\":\"%sc\",\"rtry\":\"%rc\",\"queue_s\":\"%sq\",\"queue_b\":\"%bq\",\"rqst\":\"%r\",\"hdrs\":\"%hr\",\"cookies\":\"%CC\",\"src_ip\":\"%[capture.req.hdr(1)]\",\"user_agent\":\"%[capture.req.hdr(5)]\",\"accept_lang\":\"%[capture.req.hdr(6)]\",\"protocol\":\"%[capture.req.hdr(2)]\"}

listen haproxy_stats
  bind  :50000
  no log
  stats uri /
  stats enable

listen health_url
  bind  :60000
  mode  health

#{{frontend beings}}

frontend localhost
  bind  :10001
  log 127.0.0.1:10514 local2 debug info
  mode  http

  # CORS Preflight Header Capture
  # This capture request header must be the first in the list. It is used to modify http-response headers.
  capture request header Origin             len 128
  capture request header X-Forwarded-For    len 15
  capture request header X-Forwarded-Proto  len 5
  capture request header X-Forwarded-Port   len 6
  capture request header Host               len 64
  capture request header User-Agent         len 64
  capture request header Accept-language    len 64
  capture request header Accept             len 64

  # Protocol ACL(s)
  acl is-http                hdr(X-Forwarded-Proto)     http

  acl SRC_tendot             hdr_ip(X-Forwarded-For,-1) 10.0.0.0/8

  # Backend ACL(s)
  acl is-first               path_reg ^/first($|/)
  acl is-second              path_reg ^/second($|/)
  acl is-third               path_reg ^/third($|/)
  acl is-fourth              path_reg ^/fourth($|/)
  acl is-fifth               path_reg ^/fifth($|/)

  # Other ACLs

  # For `http_headers` blueprint section
  # Header name is case-insensitive, but regex is case-sensitive.
  # Test: curl -v -H "X-Custom: vpc" localhost:10001/first/http
  acl first_match req.fhdr(X-Custom) -m reg ^vpc.*

  # For `request_behavior` blueprint section.
  # If `request_behavior` is passthru, then we don't do any special configuration.
  # If `request_behavior` is redirect, then we need to issue a 301 to the server,
  # Rather than going through HAProxy. (?) ON HOLD.
  # ...
  # It was decided that `request_behavior` would be dropped from the Alias schema,
  # since it really belongs on the foreign service type.

  # For `non_ssl_action` blueprint section.
  # `drop` - Drop the request. No response, just dropped. This is the default.
  # Test: curl -v -H "X-Forwarded-Proto: http" localhost:10001/second/http
  http-request silent-drop if is-second is-http
  # `redirect_to_https` - Redirected to HTTPS using a 301 response code.
  # Test: curl -v -H "X-Forwarded-Proto: http" localhost:10001/third/http
  redirect scheme https code 301 if is-third is-http
  # `rewrite_to_handler` - Pass the request to a handler for further processing.
  #                        Requires handler element beneath type. If a request is
  #                        received using HTTP and type==rewrite_to_handler the
  #                        request is sent to the specified URL instead of the
  #                        original URL. This can be used to better manage HTTP
  #                        requests that shouldn't simply result in a redirect or
  #                        being dropped. For example it could be used to invalidate
  #                        a SessionId that was sent in an HTTP request.
  # Test: curl -v -H "X-Forwarded-Proto: http" localhost:10001/fourth/http
  redirect location http://localhost:8110/http if is-fourth is-http

  http-request set-header X-Orig-Port  %[req.hdr(X-Forwarded-Port)]
  http-request set-header X-Orig-Proto %[req.hdr(X-Forwarded-Proto)]

  # If the X-Forwarded-For header does not end with a 10.* address, then set the x-forward header.
  # This does _not_ modifiy the X-Forwarded-For header at all.
  http-request set-header x-forward %[req.hdr_ip(X-Forwarded-For,-1)] if !SRC_tendot


  # ELBs munge Host => host
  # Heroku returns "Heroku | No such app" 404 if not "Host"
  # RFCs 2616 (and Obsolete:r 7230) : "case-insensitive field name"
  http-request set-header fOo %[req.hdr(host)]
  http-request del-header hoSt
  http-request add-header Host %[req.hdr(FOO)]
  http-request del-header foO

use_backend localhost:first if is-first first_match
use_backend localhost:second if is-second
use_backend localhost:third if is-third
use_backend localhost:fourth if is-fourth
use_backend localhost:fifth if is-fifth SRC_tendot
default_backend localhost:catchall

backend localhost:first
  log global
  balance roundrobin
  reqrep ^([^\ ]*)\ /first/(.*) \1\ /\2
  reqdel X-Orig-Base:\ .*
  reqadd X-Orig-Base:\ /first
  server first localhost:8110

backend localhost:second
   log global
   balance roundrobin
   reqrep ^([^\ ]*)\ /second/(.*) \1\ /\2
   reqdel X-Orig-Base:\ .*
   reqadd X-Orig-Base:\ /second
   server first localhost:8120

backend localhost:third
    log global
    balance roundrobin
    reqrep ^([^\ ]*)\ /third/(.*) \1\ /\2
    reqdel X-Orig-Base:\ .*
    reqadd X-Orig-Base:\ /third
    server first localhost:8130

backend localhost:fourth
    log global
    balance roundrobin
    reqrep ^([^\ ]*)\ /fourth/(.*) \1\ /\2
    reqdel X-Orig-Base:\ .*
    reqadd X-Orig-Base:\ /fourth
    server first localhost:8140

backend localhost:fifth
    log global
    balance roundrobin
    reqrep ^([^\ ]*)\ /fifth/(.*) \1\ /\2
    reqdel X-Orig-Base:\ .*
    reqadd X-Orig-Base:\ /fifth
    server first localhost:8150

backend localhost:catchall
  balance leastconn
